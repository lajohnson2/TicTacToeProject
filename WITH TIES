import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.*;
//how to increment properly
//how to make button not switch after first click
//resize restart and exit buttons
//change font size in buttons
public class TicTacToeBoard extends JFrame {
	
	/**
	 * Fields:
	 */
	private static boolean oWinner;
	private static boolean xWinner;
	private static JFrame frame;
	private static JFrame tieFrame;
	private static JFrame grandFrame;
	private static JFrame winningFrame;
	private static JButton buttonArray[] = new JButton[81];
	private byte count = 0;
	
	/* Defines what happens when the players hit the buttons
	 * 0: X
	 * 1: O
	 */
	private ActionListener setXO;
	private static String player1;
	private String player2;
	
	/*Fields dealing with the individual 3x3 boards*/
	private static ArrayList<JButton> board1 = new ArrayList<JButton>();
	private static ArrayList<JButton> board2 = new ArrayList<JButton>();
	private static ArrayList<JButton> board3 = new ArrayList<JButton>();
	private static ArrayList<JButton> board4 = new ArrayList<JButton>();
	private static ArrayList<JButton> board5 = new ArrayList<JButton>();
	private static ArrayList<JButton> board6 = new ArrayList<JButton>();
	private static ArrayList<JButton> board7 = new ArrayList<JButton>();
	private static ArrayList<JButton> board8 = new ArrayList<JButton>();
	private static ArrayList<JButton> board9 = new ArrayList<JButton>();
	
	/*Fields dealing with what we need to calculate the winner*/
	private static ArrayList<Integer> oSpots = new ArrayList<Integer>();
	private static ArrayList<Integer> xSpots = new ArrayList<Integer>();
	private static ArrayList<Integer> oSpotsBig = new ArrayList<Integer>();
	private static ArrayList<Integer> xSpotsBig = new ArrayList<Integer>();
	private static int bigBoardPosition;
	private static int oCount;
	private static int xCount;
	private static boolean tie;
	private String player;
	ArrayList<ArrayList<JButton>> largeBoard = new ArrayList<ArrayList<JButton>>();
	private static Color mint = new Color(117,201, 130);
	public static void main(String[] args) {
		new TicTacToeBoard();

	}

	public TicTacToeBoard() {
		
		player1 = "X";
		player2 = "O";
		oCount = 0;
		xCount = 0;
		winningFrame = new JFrame("O is the winner!");
		winningFrame.setSize(350, 250);
		winningFrame.setResizable(false);
		winningFrame.setVisible(false);
		winningFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		grandFrame = new JFrame("Grand Victory!");
		grandFrame.setSize(600, 600);
		grandFrame.setResizable(false);
		grandFrame.setVisible(false);
		grandFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		tieFrame = new JFrame("There was a Tie!");
		tieFrame.setSize(350,250);
		tieFrame.setResizable(false);
		tieFrame.setVisible(false);
		winningFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

		/* Sets up the game */
		frame = new JFrame("Which Board? " + this.player1 + " Picks");
		frame.setSize(600, 600);
		frame.setResizable(false);
		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		frame.setVisible(true);
		frame.setLayout(new GridLayout(10, 9));

		/* setXO makes the button's text either O or X*/
		setXO = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				JButton button = (JButton) event.getSource();
				if (count % 2 == 0) {
					player1 = "X";
					player2 = "O";
					boolean check = false;
					for (int i = 0; i < oSpots.size(); i++) {
						for (int j = 0; j < xSpots.size(); j++) {
							int convertbutton = Integer.parseInt(button.getName());
							if (oSpots.get(i) == convertbutton || xSpots.get(j) == convertbutton) check = true;
						}
					}
					if (!check) {
						count++;
						button.setText("X");
						UIManager.put("Button.font",
								new javax.swing.plaf.FontUIResource("Century Gothic", Font.BOLD, 35));
								xSpots.add(Integer.parseInt(button.getName()));
								if(winOrLose(xSpots)){
									count = 0;
								}
					} else System.out.println("Spot already taken!");
				} else {
					boolean check = false;
					for (int i = 0; i < xSpots.size(); i++) {
						for (int j = 0; j < oSpots.size(); j++) {
							int convertbutton = Integer.parseInt(button
									.getName());
							if (xSpots.get(i) == convertbutton || oSpots.get(j) == convertbutton) check = true;
						}
					}
					if (!check) {
						count++;
						button.setText("O");
						UIManager.put("Button.font",
								new javax.swing.plaf.FontUIResource("Century Gothic", Font.BOLD, 35));
								oSpots.add(Integer.parseInt(button.getName()));
								if(winOrLose(oSpots)){
									count = 1;
								}
					} else System.out.println("Spot already taken!");
				}
			}
		};

		for (int i = 0; i < 81; i++) {
			buttonArray[i] = new JButton();
			final int buttonNumber = i;
			buttonArray[buttonNumber].addActionListener(setXO);
			
			/* The following code sets each of the small 3x3 boards.*/
			if (i <= 2 || (i <= 11 && i >= 9) || (i <= 20 && i >= 18)) {
				buttonArray[i].setBackground(mint);
				buttonArray[i].setOpaque(true);
				board1.add(buttonArray[i]);
				String name = String.valueOf(board1.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber].addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=1;
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 1");
							}
						});

			} else if ((i >= 3 && i <= 5) || (i >= 12 && i <= 14) || (i >= 21 && i <= 23)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board2.add(buttonArray[i]);
				String name = String.valueOf(board2.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber].addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=2;
								hideBoard(board1);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 2");
							}
						});
			} else if ((i >= 6 && i <= 8) || (i >= 15 && i <= 17) || (i >= 24 && i <= 26)) {
				buttonArray[i].setBackground(mint);
				buttonArray[i].setOpaque(true);
				board3.add(buttonArray[i]);
				String name = String.valueOf(board3.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber].addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=3;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 3");
							}
						});
			} else if ((i >= 27 && i <= 29) || (i >= 36 && i <= 38) || (i >= 45 && i <= 47)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board4.add(buttonArray[i]);
				String name = String.valueOf(board4.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber].addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=4;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 4");
							}
						});
			} else if ((i >= 30 && i <= 32) || (i >= 39 && i <= 41) || (i >= 48 && i <= 50)) {
				buttonArray[i].setBackground(mint);
				buttonArray[i].setOpaque(true);
				board5.add(buttonArray[i]);
				String name = String.valueOf(board5.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber].addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=5;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 5");
							}
						});
			} else if ((i >= 33 && i <= 35) || (i >= 42 && i <= 44) || (i >= 51 && i <= 53)) {
				buttonArray[i].setBackground(Color.WHITE);
				board6.add(buttonArray[i]);
				String name = String.valueOf(board6.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber].addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=6;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 6");
							}
						});
			} else if ((i >= 54 && i <= 56) || (i >= 63 && i <= 65) || (i >= 72 && i <= 74)) {
				buttonArray[i].setBackground(mint);
				buttonArray[i].setOpaque(true);
				board7.add(buttonArray[i]);
				String name = String.valueOf(board7.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber].addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=7;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 7");
							}
						});
			} else if ((i >= 57 && i <= 59) || (i >= 66 && i <= 68) || (i >= 75 && i <= 77)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board8.add(buttonArray[i]);
				String name = String.valueOf(board8.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber].addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=8;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board9);
								frame.setTitle("Board 8");
							}
						});
			} else {
				buttonArray[i].setBackground(mint);
				buttonArray[i].setOpaque(true);
				board9.add(buttonArray[i]);
				String name = String.valueOf(board9.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								bigBoardPosition=9;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								frame.setTitle("Board 9");
							}
						});
			}

			/* making an array list with all of the small boards to be used to help later
			 * in finding the overall winner */
			largeBoard.add(board1);
			largeBoard.add(board2);
			largeBoard.add(board3);
			largeBoard.add(board4);
			largeBoard.add(board5);
			largeBoard.add(board6);
			largeBoard.add(board6);
			largeBoard.add(board7);
			largeBoard.add(board8);
			largeBoard.add(board9);

			frame.add(buttonArray[i]);
			buttonArray[i].setVisible(true);

		}

		JButton restart = new JButton();/* creates instance of Jbutton for the restart button */
		restart.setBounds(130, 100, 100, 40);
		restart.setIcon(new ImageIcon("restartbutton.gif"));

		JButton exit = new JButton("Exit");/* creates instance of Jbutton for the exit button */
		exit.setIcon(new ImageIcon("exit.gif"));

		// exit.setBounds(30,100,100,40);//x axis, y axis, width, height
		exit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				System.exit(0);
			}
		});
		ActionListener restartAL = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				for (int i = 0; i < 81; i++) {
					buttonArray[i].setText(" ");
				}
				for (int i = 0; i < 9; i++) {
					board1.get(i).setBackground(mint);
					board2.get(i).setBackground(Color.WHITE);
					board3.get(i).setBackground(mint);
					board4.get(i).setBackground(Color.WHITE);
					board5.get(i).setBackground(mint);
					board6.get(i).setBackground(Color.WHITE);
					board7.get(i).setBackground(mint);
					board8.get(i).setBackground(Color.WHITE);
					board9.get(i).setBackground(mint);	
				}
				/* brings back to original big board and clears the locations of X and O */
				showBoard(board1);
				showBoard(board2);
				showBoard(board3);
				showBoard(board4);
				showBoard(board5);
				showBoard(board6);
				showBoard(board7);
				showBoard(board8);
				showBoard(board9);
				frame.setTitle("Which Board?: " + player1 + " Picks");
				xSpots.clear();
				oSpots.clear();	
				xSpotsBig.clear();
				oSpotsBig.clear();
			}
		};
		restart.addActionListener(restartAL);
		frame.add(restart);
		restart.setBounds(100, 550, 100, 40); /* x axis, y axis, width, height */
		frame.add(exit);
		// exit.setBounds(100,520,100,40); /* x axis, y axis, width, height*/

		/* make sure the JFrame is visible */
		frame.setVisible(true); 
	}

	/** method to hide not in-use boards (implemented in the constructor)*/
	public void hideBoard(ArrayList<JButton> board) {
		for (int i = 0; i < 9; i++) {
			board.get(i).setVisible(false);
		}
	}

	/** method to show boards */
	public static void showBoard(ArrayList<JButton> board) {
		for (int i = 0; i < 9; i++) {
			board.get(i).setVisible(true);
		}
	}
	/**tests the arrayList of a board to see if it has a combination of winning locations 
	 * @return true if 3 in a row horizontally, vertically, or diagonally
	 * @return false if no winning combination
	 */
	public boolean winOrLose(ArrayList<Integer> locations) {
		boolean result = false;
		if (locations.contains(0) && locations.contains(1) && locations.contains(2)) {
			result = true;
			winAction(locations,false);
		} else if (locations.contains(3) && locations.contains(4) && locations.contains(5)) {
			result = true;
			winAction(locations,false);
		} else if (locations.contains(6) && locations.contains(7) && locations.contains(8)) {
			result = true;
			winAction(locations,false);
		} else if (locations.contains(0) && locations.contains(3) && locations.contains(6)) {
			result = true;
			winAction(locations,false);
		} else if (locations.contains(1) && locations.contains(4) && locations.contains(7)) {
			result = true;
			winAction(locations,false);
		} else if (locations.contains(2) && locations.contains(5) && locations.contains(8)) {
			result = true;
			winAction(locations,false);
		} else if (locations.contains(0) && locations.contains(4) && locations.contains(8)) {
			result = true;
			winAction(locations,false);
		} else if (locations.contains(6) && locations.contains(4) && locations.contains(2)) {
			result = true;
			winAction(locations,false);
		} else  if(locations.contains(0) && locations.contains(4) &&locations.contains(8)){
			result = true;
			winAction(locations,false);
		} else if(locations.size() == 5) {

			winAction(locations,true);
		}
		return result;
	}
	
	
	/**
	 * This method handles what happens when there is a winner
	 * @param determineWinner
	 */
	public void winAction(ArrayList<Integer> determineWinner, boolean tie) {
		JPanel panel = new JPanel();
		JPanel panelTie = new JPanel(); //created another panel for the tie
		JLabel label0 = new JLabel("<html><font size=10><center>Congratulations!<br> You are the Winner!");
		JButton button = new JButton("Play Another Board!");
		button.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				for (int i = 0; i < 81; i++) buttonArray[i].setText(" ");
				/* brings back to original big board and clears the locations of X and O */
				showBoard(board1);
				showBoard(board2);
				showBoard(board3);
				showBoard(board4);
				showBoard(board5);
				showBoard(board6);
				showBoard(board7);
				showBoard(board8);
				showBoard(board9);
				frame.setTitle("Which Board?: " + player1 + " Picks");
				xSpots.clear();
				oSpots.clear();
				winningFrame.setVisible(false);
				tieFrame.setVisible(false);
				dispose();
			}	
			
			
		});
		
		JButton buttonTie = new JButton("Play Another Board!"); //created another button for tie
		buttonTie.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				for (int i = 0; i < 81; i++) buttonArray[i].setText(" ");
				/* brings back to original big board and clears the locations of X and O */
				showBoard(board1);
				showBoard(board2);
				showBoard(board3);
				showBoard(board4);
				showBoard(board5);
				showBoard(board6);
				showBoard(board7);
				showBoard(board8);
				showBoard(board9);
				frame.setTitle("Which Board?: " + player1 + " Picks");
				xSpots.clear();
				oSpots.clear();
				winningFrame.setVisible(false);
				tieFrame.setVisible(false);
				dispose();
			}	
			
			
		});
		if(determineWinner.equals(oSpots) && tie == false){
			oWinner=true;
			xWinner=false;
			winningFrame.setTitle("O is the winner!");
			winningFrame.setVisible(true);
			oCount++;
			turnGray(bigBoardPosition);
			oSpotsBig.add(bigBoardPosition);
			
		}
		else if(determineWinner.equals(xSpots)&& tie == false){
			xWinner=true;
			oWinner=false;
			winningFrame.setTitle("X is the winner!");
			winningFrame.setVisible(true);
			xCount++;
			turnGray(bigBoardPosition);
			xSpotsBig.add(bigBoardPosition);
		}
		String Tlabel1 = "There was a Tie!";
		String Tlabel2 = "The player with the least amount of spots on the board wins!";
		String Tlabel3 = "";
		if(tie == true){
				if(oSpots.size() ==4){
					Tlabel3 = "Congratulations O!";
					oSpotsBig.add(bigBoardPosition);
					oWinner = true;
					xWinner = false;
					turnGray(bigBoardPosition);
				}
				if(xSpots.size() ==4){
					Tlabel3 = "Congratulations X!";
					xSpotsBig.add(bigBoardPosition);
					oWinner = false;
					xWinner = true;
					turnGray(bigBoardPosition);
				}
				
				tieFrame.setTitle("There was a Tie!");
				tieFrame.setVisible(true);
		}
		JLabel tieLabel1 = new JLabel(Tlabel1);
		JLabel tieLabel2 = new JLabel(Tlabel2);
		JLabel tieLabel3 = new JLabel(Tlabel3);
		panelTie.add(tieLabel1);
		panelTie.add(tieLabel2);
		panelTie.add(tieLabel3);
		panel.add(label0);
		panel.add(button);
		panelTie.add(buttonTie);
		tieFrame.add(panelTie);
		winningFrame.add(panel);
		boolean Xwin = checkGrandVictory(xSpotsBig);
		boolean Owin = checkGrandVictory(oSpotsBig);
		grandWinAction(Xwin);
		grandWinAction(Owin);
		}
	
	/**
	 * After there is a winner, set the current board to either X or O 
	 * using the background
	 * @param bigBoardPosition = on which small board they played 
	 */
	public void turnGray(int bigBoardPosition) {
		for (int i = 0; i < 9; i++) {
			if (bigBoardPosition == 1) {
					if(oWinner==true){
						board1.get(i).setBackground(Color.BLUE);
						board1.get(4).setBackground(Color.WHITE);
					}
					else if(xWinner==true){
						if (i%2 == 0) board1.get(i).setBackground(Color.GRAY);
						else board1.get(i).setBackground(Color.WHITE);
					}
				}
			if (bigBoardPosition == 2) {
				if(oWinner==true){
					board2.get(i).setBackground(Color.BLUE);
					board2.get(4).setBackground(Color.WHITE);
				}
				else if(xWinner==true){
					if (i%2 == 0) board2.get(i).setBackground(Color.GRAY);
					else board2.get(i).setBackground(Color.WHITE);
				}
				}
			if (bigBoardPosition == 3) {
				if(oWinner==true){
					board3.get(i).setBackground(Color.BLUE);
					board3.get(4).setBackground(Color.WHITE);
				}
				else if(xWinner==true){
					if (i%2 == 0) board3.get(i).setBackground(Color.GRAY);
					else board3.get(i).setBackground(Color.WHITE);
				}
			}
			if (bigBoardPosition == 4) {
				if(oWinner==true){
					board4.get(i).setBackground(Color.BLUE);
					board4.get(4).setBackground(Color.WHITE);
				}
				else if(xWinner==true){
					if (i%2 == 0) board4.get(i).setBackground(Color.GRAY);
					else board4.get(i).setBackground(Color.WHITE);
				}
			}
			if (bigBoardPosition == 5) {
				if(oWinner==true){
					board5.get(i).setBackground(Color.BLUE);
					board5.get(4).setBackground(Color.WHITE);
				}
				else if(xWinner==true){
					if (i%2 == 0) board5.get(i).setBackground(Color.GRAY);
					else board5.get(i).setBackground(Color.WHITE);
				}
			}
			if (bigBoardPosition == 6) {
				if(oWinner==true){
					board6.get(i).setBackground(Color.BLUE);
					board6.get(4).setBackground(Color.WHITE);
				}
				else if(xWinner==true){
					if (i%2 == 0) board6.get(i).setBackground(Color.GRAY);
					else board6.get(i).setBackground(Color.WHITE);
				}
			}
			if (bigBoardPosition == 7) {
				if(oWinner==true){
					board7.get(i).setBackground(Color.BLUE);
					board7.get(4).setBackground(Color.WHITE);
				}
				else if(xWinner==true){
					if (i%2 == 0) board7.get(i).setBackground(Color.GRAY);
					else board7.get(i).setBackground(Color.WHITE);
				}
			}
			if (bigBoardPosition == 8) {
				if(oWinner==true){
					board8.get(i).setBackground(Color.BLUE);
					board8.get(4).setBackground(Color.WHITE);
				}
				else if(xWinner==true){
					if (i%2 == 0) board8.get(i).setBackground(Color.GRAY);
					else board8.get(i).setBackground(Color.WHITE);
				}
			}
			if (bigBoardPosition == 9) {
				if(oWinner==true){
					board9.get(i).setBackground(Color.BLUE);
					board9.get(4).setBackground(Color.WHITE);
				}
				else if(xWinner==true){
					if (i%2 == 0) board9.get(i).setBackground(Color.GRAY);
					else board9.get(i).setBackground(Color.WHITE);
				}
			}
		}
	}

	/**
	 * Determines who won the overall 9x9 board
	 * @param whoWon is either the locaions of the Os or Xs on the big board
	 * @return true if there is an overall winner
	 * (i.e., if there are 3 "X" winner boards in a row
	 * or 3 "O" winner boards in a row)
	 */
	public static boolean checkGrandVictory(ArrayList<Integer> whoWon) {
		boolean checkBig = false;
		if(whoWon.equals(oSpotsBig)) {
			if((oSpotsBig.contains(1) && oSpotsBig.contains(2) && oSpotsBig.contains(3)) || (oSpotsBig.contains(7)
					&& oSpotsBig.contains(8) && oSpotsBig.contains(9)) || 
					(oSpotsBig.contains(4) && oSpotsBig.contains(5) && oSpotsBig.contains(6)) || 
					(oSpotsBig.contains(1) && oSpotsBig.contains(5) && oSpotsBig.contains(9)) ||
					(oSpotsBig.contains(3) && oSpotsBig.contains(5) && oSpotsBig.contains(7)) ||
					(oSpotsBig.contains(2) && oSpotsBig.contains(5) && oSpotsBig.contains(8)) ||						
					(oSpotsBig.contains(1) && oSpotsBig.contains(4) && oSpotsBig.contains(7)) || 
					(oSpotsBig.contains(3) && oSpotsBig.contains(6) && oSpotsBig.contains(9))) {
				checkBig=true;
			}else if(oSpotsBig.size() == 4 && xSpotsBig.size() == 5 ){
				checkBig = true;
			}
		}
		else if(whoWon.equals(xSpotsBig)) {
			if((xSpotsBig.contains(1) && xSpotsBig.contains(2) && xSpotsBig.contains(3)) || (xSpotsBig.contains(7)
				&& xSpotsBig.contains(8) && xSpotsBig.contains(9)) || 
				(xSpotsBig.contains(4) && xSpotsBig.contains(5) && xSpotsBig.contains(6)) || 
				(xSpotsBig.contains(1) && xSpotsBig.contains(5) && xSpotsBig.contains(9)) ||
				(xSpotsBig.contains(3) && xSpotsBig.contains(5) && xSpotsBig.contains(7)) ||
				(xSpotsBig.contains(2) && xSpotsBig.contains(5) && xSpotsBig.contains(8)) ||
				(xSpotsBig.contains(1) && xSpotsBig.contains(4) && xSpotsBig.contains(7)) || 
				(xSpotsBig.contains(3) && xSpotsBig.contains(6) && xSpotsBig.contains(9))) {
				checkBig=true;
			}else if(xSpotsBig.size() == 4 && oSpotsBig.size() == 5){
				checkBig  = true;
			}
		}
		grandWinAction(checkBig);
		return checkBig;
	}

	/**
	 * Handles Ties
	 */
	public static void tieAction() {
		JPanel panel = new JPanel();
		JLabel label0;
		JButton button;
		if(oCount>xCount) {
			tieFrame.setVisible(true);
			tieFrame.setTitle("The tie has been broken!");
			label0=new JLabel("<html><font size=20><center>O is the <b>grand winner!</b></center></html></font>");
		} else if(xCount>oCount) {
			tieFrame.setVisible(true);
			tieFrame.setTitle("The tie has been broken!");
			label0=new JLabel("<html><font size=20><center>X is the <b>grand winner!</b></center></html></font>");
		} else {
			tie=true;
			tieFrame.setVisible(true);
			tieFrame.setTitle("The tie has not been broken!");
			label0=new JLabel("<html><font size=20><center>A winner has not been determined!</b></center></html></font>");
			button=new JButton("Try Again!");
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					for (int i = 0; i < 81; i++) {
						buttonArray[i].setText(" ");
					}
					// brings back to original big board and clears the locations of
					// x and o
					showBoard(board1);
					showBoard(board2);
					showBoard(board3);
					showBoard(board4);
					showBoard(board5);
					showBoard(board6);
					showBoard(board7);
					showBoard(board8);
					showBoard(board9);
					frame.setTitle("Which Board?: " + player1 + " Picks");
					xSpots.clear();
					oSpots.clear();
					
				}
				
			});
			panel.add(button);
		}
		panel.add(label0);
		tieFrame.add(panel);
		
	}

	public static void grandWinAction(boolean didSomeoneWin){
		//remember to add buttons
		if(didSomeoneWin==true){
			grandFrame.setVisible(true);
		}
		JPanel panel = new JPanel();
		JLabel label0 = new JLabel("<html><font color=red size=22><center>GAME OVER!<br></center></font></html>");
		JLabel label1 = new JLabel("");
		JButton button;
		if(oCount>xCount){
			label1.setText("<html><font size=22><center>O is the <b>grand winner!</b></html></font></center>");
		}
		if(xCount>oCount){
			label1.setText("<html><font size=22><center>X is the <b>grand winner!</b></html></font></center>");
		}
		if(xCount==oCount){
			label1.setText("<html><font size=22><center>It's a tie!<br>Play a final match!</html></font></center>");
		}
		if(oCount>xCount || oCount<xCount){
			button = new JButton();
			button.setIcon(new ImageIcon("playagainbutton.gif"));
		}
		else {
			button = new JButton("Final Round!");
			tie=true;
		}
		button.addActionListener(new ActionListener() {
			@SuppressWarnings("unused")
			public void actionPerformed(ActionEvent e) {
				for (int i = 0; i < 81; i++) {
					buttonArray[i].setText(" ");
				}
				
				for (int i = 0; i < 9; i++) {
					board1.get(i).setBackground(mint);
					board2.get(i).setBackground(Color.WHITE);
					board3.get(i).setBackground(mint);
					board4.get(i).setBackground(Color.WHITE);
					board5.get(i).setBackground(mint);
					board6.get(i).setBackground(Color.WHITE);
					board7.get(i).setBackground(mint);
					board8.get(i).setBackground(Color.WHITE);
					board9.get(i).setBackground(mint);	
				}
				/* brings back to original big board and clears the locations of X and O */
				showBoard(board1);
				showBoard(board2);
				showBoard(board3);
				showBoard(board4);
				showBoard(board5);
				showBoard(board6);
				showBoard(board7);
				showBoard(board8);
				showBoard(board9);
				frame.setTitle("Which Board?: " + player1 + " Picks");
				xSpots.clear();
				oSpots.clear();
				xSpotsBig.clear();
				oSpotsBig.clear();
				grandFrame.setVisible(false);
				winningFrame.setVisible(false);
				tieFrame.setVisible(false);				
			}

		});
		panel.add(button);
		panel.add(label0);
		panel.add(label1);
		grandFrame.add(panel);
	}

