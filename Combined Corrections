import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

public class TicTacToeBoard extends JFrame {
	/**
	 * Fields:
	 */
	private static JFrame frame;
	private static JFrame grandXFrame;
	private static JFrame grandOFrame;
	JButton buttonArray[] = new JButton[81];
	private ActionListener setXO;
	private byte count = 0;
	/* Defines what happens when the players hit the buttons
	 * 0: X
	 * 1: O
	 */
	private String player1;
	private String player2;
	private int oCount;
	private int xCount;
	private static JFrame winningOFrame;
	private static JFrame winningXFrame;
	private static JFrame winningFrame;
	private static JFrame hOrC; /*Create beginning frame requesting whether player wants to play against someone else or the computer*/
	private int boardVar = 0; //used to add board# to oWin or Xwin if they won
	
	/*Fields dealing with the individual 9x9 boards*/
	ArrayList<JButton> board1 = new ArrayList<JButton>();
	ArrayList<JButton> board2 = new ArrayList<JButton>();
	ArrayList<JButton> board3 = new ArrayList<JButton>();
	ArrayList<JButton> board4 = new ArrayList<JButton>();
	ArrayList<JButton> board5 = new ArrayList<JButton>();
	ArrayList<JButton> board6 = new ArrayList<JButton>();
	ArrayList<JButton> board7 = new ArrayList<JButton>();
	ArrayList<JButton> board8 = new ArrayList<JButton>();
	ArrayList<JButton> board9 = new ArrayList<JButton>();
	ArrayList<JButton> currBoard = new ArrayList<JButton>();
	ArrayList<Integer> oSpots = new ArrayList<Integer>();
	ArrayList<Integer> xSpots = new ArrayList<Integer>();
	ArrayList<Integer> oWin = new ArrayList<Integer>(); //boards won by O
	ArrayList<Integer> xWin = new ArrayList<Integer>(); // boards won by X
	/*Fields dealing with what we need to calculate the winner*/
	


	public static void main(String[] args) {
		new TicTacToeBoard();

	}

	public TicTacToeBoard() {
		player1 = "X";
		player2 = "O";
		oCount = 0;
		xCount = 0;
		winningOFrame = new JFrame("O is the winner!");
		winningOFrame.setSize(300, 300);
		winningOFrame.setResizable(false);
		winningOFrame.setVisible(false);
		winningOFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		
		//Game over for X Winning
		JPanel panel = new JPanel();
		JLabel label0 = new JLabel("Congratulations X!");
		panel.add(label0);
		grandXFrame = new JFrame("Game Over!");
		grandXFrame.add(panel);
		grandXFrame.setSize(600, 600);
		grandXFrame.setResizable(false);
		grandXFrame.setVisible(false);
		grandXFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
		//Game over for O Winning
		JPanel panel2 = new JPanel();
		JLabel label02 = new JLabel("Congratulations O!");
		panel.add(label02);
		grandOFrame = new JFrame("Game Over!");
		grandXFrame.add(panel2);
		grandOFrame.setSize(600, 600);
		grandOFrame.setResizable(false);
		grandOFrame.setVisible(false);
		grandOFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
		winningXFrame = new JFrame("X is the winner!");
		winningXFrame.setSize(300, 300);
		winningXFrame.setResizable(false);
		winningXFrame.setVisible(false);
		winningOFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		/* Sets up the game */
		frame = new JFrame("Which Board? " + this.player1 + " Picks");
		frame.setSize(600, 600);
		frame.setResizable(false);
		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		frame.setVisible(true);
		frame.setLayout(new GridLayout(10, 9));

		/* setXO makes the button's text either O or X*/
		setXO = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				JButton button = (JButton) event.getSource();
				if (count % 2 == 0) {
					boolean check = false;
					int convertbutton = Integer.parseInt(button.getName());
					for (int i = 0; i < oSpots.size(); i++) {
						for (int j = 0; j < xSpots.size(); j++) {
							if (oSpots.get(i) == convertbutton
									|| xSpots.get(j) == convertbutton) {
								check = true;
							}
						}
					}

					if (!check) {
						count++;
						button.setText("X");
						UIManager.put("Button.font",
								new javax.swing.plaf.FontUIResource(
										"Century Gothic", Font.BOLD, 30));
						xSpots.add(Integer.parseInt(button.getName()));
						
						if (winOrLose(xSpots)) { 
							xWin.add(boardVar); //adds board# the player won to xWin
							grandWinAction(xCount); //checks to see if there's 
						}							//three in a row after player 
													//wins this board game
						

					} else {
						System.out.println("Spot already taken!");
					}

				} else {
					boolean check = false;
					int convertbutton = Integer.parseInt(button.getName());
					for (int i = 0; i < xSpots.size(); i++) {
						for (int j = 0; j < oSpots.size(); j++) {
							if (xSpots.get(i) == convertbutton
									|| oSpots.get(j) == convertbutton) {
								check = true;
							}
						}
					}

					if (!check) {
						count++;
						button.setText("O");
						UIManager.put("Button.font",
								new javax.swing.plaf.FontUIResource(
										"Century Gothic", Font.BOLD, 30));
						
						oSpots.add(Integer.parseInt(button.getName()));
						
						if (winOrLose(oSpots)) { 
							oWin.add(boardVar); //adds board# the player won to oWin
							grandWinAction(oCount);//checks to see if there's 
						}							//three in a row after player 
													//wins this board game
						
					} else {
						System.out.println("Spot already taken!");
					}
				}
			}
		};

		/* Populates a large board with 81 buttons (9 9x9 boards of buttons) */
		for (int i = 0; i < 81; i++) {
			buttonArray[i] = new JButton();
			final int buttonNumber = i;
			buttonArray[buttonNumber].addActionListener(setXO);

			/* Board 1: */
			if (i <= 2 || (i <= 11 && i >= 9) || (i <= 20 && i >= 18)) {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board1.add(buttonArray[i]);
				String name = String.valueOf(board1.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boardVar =1;     //assigns board number if board is picked
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 1");
							}
						});
				/* Board 2: */
			} else if ((i >= 3 && i <= 5) || (i >= 12 && i <= 14)
					|| (i >= 21 && i <= 23)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board2.add(buttonArray[i]);
				String name = String.valueOf(board2.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boardVar = 2;
								hideBoard(board1);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 2");
							}
						});
				/* Board 3: */
			} else if ((i >= 6 && i <= 8) || (i >= 15 && i <= 17)
					|| (i >= 24 && i <= 26)) {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board3.add(buttonArray[i]);
				String name = String.valueOf(board3.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boardVar = 3;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 3");
							}
						});
				/* Board 4: */	
			} else if ((i >= 27 && i <= 29) || (i >= 36 && i <= 38)
					|| (i >= 45 && i <= 47)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board4.add(buttonArray[i]);
				String name = String.valueOf(board4.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boardVar = 4;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 4");
							}
						});
				/* Board 5: */
			} else if ((i >= 30 && i <= 32) || (i >= 39 && i <= 41)
					|| (i >= 48 && i <= 50)) {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board5.add(buttonArray[i]);
				String name = String.valueOf(board5.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boardVar = 5;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 5");
							}
						});
				/* Board 6: */
			} else if ((i >= 33 && i <= 35) || (i >= 42 && i <= 44)
					|| (i >= 51 && i <= 53)) {
				buttonArray[i].setBackground(Color.WHITE);
				board6.add(buttonArray[i]);
				String name = String.valueOf(board6.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								currBoard = board6;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 6");
							}
						});
				/* Board 7: */
			} else if ((i >= 54 && i <= 56) || (i >= 63 && i <= 65)
					|| (i >= 72 && i <= 74)) {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board7.add(buttonArray[i]);
				String name = String.valueOf(board7.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boardVar =7;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 7");
							}
						});
				/* Board 8: */
			} else if ((i >= 57 && i <= 59) || (i >= 66 && i <= 68)
					|| (i >= 75 && i <= 77)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board8.add(buttonArray[i]);
				String name = String.valueOf(board8.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boardVar = 8;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board9);
								frame.setTitle("Board 8");
							}
						});
				/* Board 9: */
			} else {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board9.add(buttonArray[i]);
				String name = String.valueOf(board9.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boardVar = 9;
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								frame.setTitle("Board 9");
							}

						});
			}
			frame.add(buttonArray[i]);
			buttonArray[i].setVisible(true);

		}

		/* Creates a JButton for the Restart button */
		JButton restart = new JButton("Restart");
		restart.setBounds(130, 100, 100, 40);/* x axis, y axis, width, height*/
		restart.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				oCount = 0;
				xCount = 0;
				xWin.clear();
				oWin.clear();
				for (int i = 0; i < 81; i++) {
					buttonArray[i].setText(" ");
				}
				/* brings back to original big board and clears the locations of Xs & Os */
				showBoard(board1);
				showBoard(board2);
				showBoard(board3);
				showBoard(board4);
				showBoard(board5);
				showBoard(board6);
				showBoard(board7);
				showBoard(board8);
				showBoard(board9);
				frame.setTitle("Which Board?: " + player1 + " Picks");
				xSpots.clear();
				oSpots.clear();
			}
		});

		/* Create a JButton for the Exit button */
		JButton exit = new JButton("Exit");
		// exit.setBounds(30,100,100,40); /* x axis, y axis, width, height */
		exit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				System.exit(0);
			}
		});

		frame.add(restart);
		restart.setBounds(100, 550, 100, 40);// x axis, y axis, width, height
		frame.add(exit);
		// exit.setBounds(100,520,100,40);//x axis, y axis, width, height

		/* makes sure the JFrame is visible */
		frame.setVisible(true); 
	}

	public void setBoardXorO(ArrayList<JButton> board) {
		JButton button = new JButton();
		for (int i = 0; i<9; i++) {
			button = board.get(i);
			if (winOrLose(xSpots)) button.setIcon(new ImageIcon("X.png"));
			if (winOrLose(oSpots)) button.setIcon(new ImageIcon("O.png"));
		}

	}

	// method to hide boards
	public void hideBoard(ArrayList<JButton> board) {
		for (int i = 0; i < 9; i++) {
			board.get(i).setVisible(false);
		}
	}

	// method to expose board
	public void showBoard(ArrayList<JButton> board) {
		for (int i = 0; i < 9; i++) {
			board.get(i).setVisible(true);
		}
	}

	/** Tests 9x9 board to see if it has a combination of winning paths
	 * @param locations are the different X or O locations. 
	 * @return true if 3 Xs or 3Os in a row horizontal, vertical, or diagonal
	 */
	public boolean winOrLose(ArrayList<Integer> locations) {
		boolean result = false;
		if (locations.contains(0) && locations.contains(1) && locations.contains(2)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(3) && locations.contains(4) && locations.contains(5)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(6) && locations.contains(7) && locations.contains(8)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(0) && locations.contains(3) && locations.contains(6)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(1) && locations.contains(4) && locations.contains(7)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(2) && locations.contains(5) && locations.contains(8)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(0) && locations.contains(4) && locations.contains(8)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(6) && locations.contains(4) && locations.contains(2)) {
			result = true;
			winAction(locations);
		} else {
			result = false;
		}
		return result;
	}

	/**
	 * Handles all the actions when someone wins.
	 * For the small boards, will pop up with running count of X/O wins 
	 * and the option to play the next game
	 * @param determineWinner checks if oSpots or xSpots. If 
	 */
	public void winAction(ArrayList<Integer> determineWinner) {
		JButton button = new JButton("Play Next Board");
		/* brings back to original big board and clears the locations of Xs and Os */	
		button.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				showBoard(board1);
				showBoard(board2);
				showBoard(board3);
				showBoard(board4);
				showBoard(board5);
				showBoard(board6);
				showBoard(board7);
				showBoard(board8);
				showBoard(board9);
				frame.setTitle("Which Board?: " + player1 + " Picks");
				xSpots.clear();
				oSpots.clear();		
				
				
			}
		});
		
		
		if (determineWinner.equals(oSpots)) {
			oCount++;
			JPanel panel = new JPanel();
			JLabel label0 = new JLabel("Congratulations O!");
			panel.add(label0);
			panel.add(button);
			winningOFrame.add(panel);
			winningOFrame.setVisible(true);
			// TODO Need a restart button in this frame, and a counter to indicate each player's progress
			
			grandWinAction(oCount);
			System.out.println("O is the winner!");
		
		} else {
			xCount++;
			JPanel panel = new JPanel();
			JLabel label0 = new JLabel("Congratulations X!");
			panel.add(label0);
			panel.add(button);
			winningXFrame.add(panel);
			winningXFrame.setVisible(true);
			//TODO Need a restart button in this frame, and a counter to indicate each player's progress
			
			grandWinAction(xCount);
			System.out.println("X is the winner!");
		
		}
		
		
		//			winningFrame.dispose();		
	}
	public void grandWinAction(int count){
		if (count>=3) {
			if (oWin.contains(1) && oWin.contains(2) && oWin.contains(3)) {
				grandOFrame.setVisible(true);
			} else if (oWin.contains(4) && oWin.contains(5) && oWin.contains(6)) {
				grandOFrame.setVisible(true);
			} else if (oWin.contains(7) && oWin.contains(8) && oWin.contains(9)) {
				grandOFrame.setVisible(true);
			} else if (oWin.contains(1) && oWin.contains(5) && oWin.contains(9)) {
				grandOFrame.setVisible(true);
			} else if (oWin.contains(3) && oWin.contains(5) && oWin.contains(7)) {
				grandOFrame.setVisible(true);
			} else if (oWin.contains(1) && oWin.contains(4) && oWin.contains(7)) {
				grandOFrame.setVisible(true);
			} else if (oWin.contains(2) && oWin.contains(5) && oWin.contains(8)) {
				grandOFrame.setVisible(true);
			} else if (oWin.contains(3) && oWin.contains(6) && oWin.contains(9)) {
				grandOFrame.setVisible(true);
			}
			
			if (xWin.contains(1) && xWin.contains(2) && xWin.contains(3)) {
				grandXFrame.setVisible(true);
			} else if (xWin.contains(4) && xWin.contains(5) && xWin.contains(6)) {
				grandXFrame.setVisible(true);
			} else if (xWin.contains(7) && xWin.contains(8) && xWin.contains(9)) {
				grandXFrame.setVisible(true);
			} else if (xWin.contains(1) && xWin.contains(5) && xWin.contains(9)) {
				grandXFrame.setVisible(true);
			} else if (xWin.contains(3) && xWin.contains(5) && xWin.contains(7)) {
				grandXFrame.setVisible(true);
			} else if (xWin.contains(1) && xWin.contains(4) && xWin.contains(7)) {
				grandXFrame.setVisible(true);
			} else if (xWin.contains(2) && xWin.contains(5) && xWin.contains(8)) {
				grandXFrame.setVisible(true);
			} else if (xWin.contains(3) && xWin.contains(6) && xWin.contains(9)) {
				grandXFrame.setVisible(true);
			}
		}
	}}
