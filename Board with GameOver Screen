import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

public class Board extends JFrame {

	private static JFrame frame;
	private static JFrame grandFrame;
	JButton buttonArray[] = new JButton[81];
	private byte count = 0;
	private ActionListener setXO;
	private String player1;
	private String player2;
	private int oCount;
	private int xCount;
	private static JFrame winningOFrame;
	private static JFrame winningXFrame;
	private static JFrame hOrC; //Create beginning frame requesting whether player wants to play against someone else or the computer

	ArrayList<JButton> board1 = new ArrayList<JButton>();
	ArrayList<JButton> board2 = new ArrayList<JButton>();
	ArrayList<JButton> board3 = new ArrayList<JButton>();
	ArrayList<JButton> board4 = new ArrayList<JButton>();
	ArrayList<JButton> board5 = new ArrayList<JButton>();
	ArrayList<JButton> board6 = new ArrayList<JButton>();
	ArrayList<JButton> board7 = new ArrayList<JButton>();
	ArrayList<JButton> board8 = new ArrayList<JButton>();
	ArrayList<JButton> board9 = new ArrayList<JButton>();
	ArrayList<Integer> oSpots = new ArrayList<Integer>();
	ArrayList<Integer> xSpots = new ArrayList<Integer>();
	ArrayList<Integer> oSpotsBig = new ArrayList<Integer>();
	ArrayList<Integer> xSpotsBig = new ArrayList<Integer>();
	ArrayList<ArrayList<JButton>> largeBoard = new ArrayList<ArrayList<JButton>>();

	public static void main(String[] args) {
		new Board();

	}

	public Board() {
		player1 = "X";
		player2 = "O";
		oCount = 0;
		xCount = 0;
		winningOFrame = new JFrame("O is the winner!");
		winningOFrame.setSize(300, 300);
		winningOFrame.setResizable(false);
		winningOFrame.setVisible(false);
		winningOFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		grandFrame = new JFrame("Grand Victory!");
		grandFrame.setSize(600, 600);
		grandFrame.setResizable(false);
		grandFrame.setVisible(false);
		grandFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		winningXFrame = new JFrame("X is the winner!");
		winningXFrame.setSize(300, 300);
		winningXFrame.setResizable(false);
		winningXFrame.setVisible(false);
		winningXFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		frame = new JFrame("Which Board? " + this.player1 + " Picks");
		frame.setSize(600, 600);
		frame.setResizable(false);
		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		frame.setVisible(true);
		frame.setLayout(new GridLayout(10, 9));

		setXO = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				JButton button = (JButton) event.getSource();
				count++;
				count %= 2;
				switch (count) {
				case 0:
					button.setText("O");
					UIManager.put("Button.font",
							new javax.swing.plaf.FontUIResource(
									"Century Gothic", Font.BOLD, 22));
					player1 = "X";
					oSpots.add(Integer.parseInt(button.getName())); // adding
																	// the
																	// location
																	// of the O
					System.out.println(winOrLose(oSpots)); // testing to see if
															// it was a winning
															// move (right now
															// prints true for
															// win and false for
															// loss)
					break;
				case 1:
					button.setText("X");
					UIManager.put("Button.font",
							new javax.swing.plaf.FontUIResource(
									"Century Gothic", Font.BOLD, 22));
					player2 = "O";
					xSpots.add(Integer.parseInt(button.getName())); // adding
																	// the
																	// location
																	// of the x
					System.out.println(winOrLose(xSpots)); // testing to see if
															// it was a winning
															// move (right now
															// prints true for
															// win and false for
															// loss)
					break;
				}
			}
		};

		for (int i = 0; i < 81; i++) {
			buttonArray[i] = new JButton();
			final int buttonNumber = i;

			buttonArray[buttonNumber].addActionListener(setXO);

			if (i <= 2 || (i <= 11 && i >= 9) || (i <= 20 && i >= 18)) {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board1.add(buttonArray[i]);
				String name = String.valueOf(board1.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 1");
							}

						});

			} else if ((i >= 3 && i <= 5) || (i >= 12 && i <= 14)
					|| (i >= 21 && i <= 23)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board2.add(buttonArray[i]);
				String name = String.valueOf(board2.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board1);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 2");
							}

						});
			} else if ((i >= 6 && i <= 8) || (i >= 15 && i <= 17)
					|| (i >= 24 && i <= 26)) {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board3.add(buttonArray[i]);
				String name = String.valueOf(board3.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 3");
							}

						});
			} else if ((i >= 27 && i <= 29) || (i >= 36 && i <= 38)
					|| (i >= 45 && i <= 47)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board4.add(buttonArray[i]);
				String name = String.valueOf(board4.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 4");
							}

						});
			} else if ((i >= 30 && i <= 32) || (i >= 39 && i <= 41)
					|| (i >= 48 && i <= 50)) {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board5.add(buttonArray[i]);
				String name = String.valueOf(board5.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 5");
							}

						});
			} else if ((i >= 33 && i <= 35) || (i >= 42 && i <= 44)
					|| (i >= 51 && i <= 53)) {
				buttonArray[i].setBackground(Color.WHITE);
				board6.add(buttonArray[i]);
				String name = String.valueOf(board6.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board7);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 6");
							}

						});
			} else if ((i >= 54 && i <= 56) || (i >= 63 && i <= 65)
					|| (i >= 72 && i <= 74)) {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board7.add(buttonArray[i]);
				String name = String.valueOf(board7.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board8);
								hideBoard(board9);
								frame.setTitle("Board 7");
							}

						});
			} else if ((i >= 57 && i <= 59) || (i >= 66 && i <= 68)
					|| (i >= 75 && i <= 77)) {
				buttonArray[i].setBackground(Color.WHITE);
				buttonArray[i].setOpaque(true);
				board8.add(buttonArray[i]);
				String name = String.valueOf(board8.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board9);
								frame.setTitle("Board 8");
							}

						});
			} else {
				buttonArray[i].setBackground(Color.GREEN);
				buttonArray[i].setOpaque(true);
				board9.add(buttonArray[i]);
				String name = String.valueOf(board9.indexOf(buttonArray[i]));
				buttonArray[i].setName(name);
				buttonArray[buttonNumber]
						.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								hideBoard(board1);
								hideBoard(board2);
								hideBoard(board3);
								hideBoard(board4);
								hideBoard(board5);
								hideBoard(board6);
								hideBoard(board7);
								hideBoard(board8);
								frame.setTitle("Board 9");
							}

						});
			}

			// making an array list with all of the small boards to be used to
			// possibly find the overall winner
			largeBoard.add(board1);
			largeBoard.add(board2);
			largeBoard.add(board3);
			largeBoard.add(board4);
			largeBoard.add(board5);
			largeBoard.add(board6);
			largeBoard.add(board6);
			largeBoard.add(board7);
			largeBoard.add(board8);
			largeBoard.add(board9);

			frame.add(buttonArray[i]);
			buttonArray[i].setVisible(true);

		}

		JButton restart = new JButton("Restart");// creating instance of
													// JButton, restart button
		restart.setBounds(130, 100, 100, 40);// x axis, y axis, width, height

		JButton exit = new JButton("Exit");// creating instance of JButton
		// exit.setBounds(30,100,100,40);//x axis, y axis, width, height
		exit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				System.exit(0);
			}
		});
		restart.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				for (int i = 0; i < 81; i++) {
					buttonArray[i].setText(" ");
				}
				// brings back to original big board and clears the locations of
				// x and o
				showBoard(board1);
				showBoard(board2);
				showBoard(board3);
				showBoard(board4);
				showBoard(board5);
				showBoard(board6);
				showBoard(board7);
				showBoard(board8);
				showBoard(board9);
				frame.setTitle("Which Board?: " + player1 + " Picks");
				xSpots.clear();
				oSpots.clear();
			}
		});
		frame.add(restart);
		restart.setBounds(100, 550, 100, 40);// x axis, y axis, width, height
		frame.add(exit);
		// exit.setBounds(100,520,100,40);//x axis, y axis, width, height

		// make sure the JFrame is visible
		frame.setVisible(true); // the JFrame is set to visible
	}

	// method to hide boards
	public void hideBoard(ArrayList<JButton> board) {
		for (int i = 0; i < 9; i++) {
			board.get(i).setVisible(false);
		}
	}

	// method to expose board
	public void showBoard(ArrayList<JButton> board) {
		for (int i = 0; i < 9; i++) {
			board.get(i).setVisible(true);
		}
	}

	// tests the arrayList of a board to see if it has a combination of winning
	// locations
	public boolean winOrLose(ArrayList<Integer> locations) {
		boolean result = false;
		if (locations.contains(0) && locations.contains(1)
				&& locations.contains(2)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(3) && locations.contains(4)
				&& locations.contains(5)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(6) && locations.contains(7)
				&& locations.contains(8)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(0) && locations.contains(3)
				&& locations.contains(6)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(1) && locations.contains(4)
				&& locations.contains(7)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(2) && locations.contains(5)
				&& locations.contains(8)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(0) && locations.contains(4)
				&& locations.contains(8)) {
			result = true;
			winAction(locations);
		} else if (locations.contains(6) && locations.contains(4)
				&& locations.contains(2)) {
			result = true;
			winAction(locations);
		} else {
			result = false;
		}
		return result;
	}
//	public static void close(JFrame a){
//		System.exit(0);
//	}
	// implement a way to set the small board to a big x or a big o
	public void winAction(ArrayList<Integer> determineWinner) {
		if (determineWinner.equals(oSpots)) {
			winningOFrame.setVisible(true);
			//Need a restart button in this frame, and a counter to indicate each player's progress
			oCount++;
			grandWinAction(oCount);
			System.out.println("O is the winner!");
			JLabel label0 = new JLabel("Congratulations!");
			JLabel label1 = new JLabel("Score:");
			JLabel label2 = new JLabel("Player O:" + oCount);
			JLabel label3 = new JLabel("Player X:" + xCount);
			JPanel panel = new JPanel();
			JButton button = new JButton("Try Again!");//Implement same action listener as other restart button
			button.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent event) {
					for (int i = 0; i < 81; i++) {
						buttonArray[i].setText(" ");
					}
					// brings back to original big board and clears the locations of
					// x and o
					showBoard(board1);
					showBoard(board2);
					showBoard(board3);
					showBoard(board4);
					showBoard(board5);
					showBoard(board6);
					showBoard(board7);
					showBoard(board8);
					showBoard(board9);
					frame.setTitle("Which Board?: " + player1 + " Picks");
					xSpots.clear();
					oSpots.clear();
				}
			});
			panel.add(button);
			panel.add(label0);
			panel.add(label1);
			panel.add(label2);
			panel.add(label3);
			winningOFrame.add(panel);
			winningOFrame.dispose();
		} else {
			winningXFrame.setVisible(true);
			//Need a restart button in this frame, and a counter to indicate each player's progress
			xCount++;
			grandWinAction(xCount);
			System.out.println("X is the winner!");
			JLabel label0 = new JLabel("Congratulations!");
			JLabel label1 = new JLabel("Score:");
			JLabel label2 = new JLabel("Player O:" + oCount);
			JLabel label3 = new JLabel("Player X:" + xCount);
			JPanel panel = new JPanel();
			JButton button = new JButton("Try Again!");//Implement same action listener as other restart button
			button.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent event) {
					for (int i = 0; i < 81; i++) {
						buttonArray[i].setText(" ");
					}
					// brings back to original big board and clears the locations of
					// x and o
					showBoard(board1);
					showBoard(board2);
					showBoard(board3);
					showBoard(board4);
					showBoard(board5);
					showBoard(board6);
					showBoard(board7);
					showBoard(board8);
					showBoard(board9);
					frame.setTitle("Which Board?: " + player1 + " Picks");
					xSpots.clear();
					oSpots.clear();
					winningOFrame.dispose();
				}
			});
			panel.add(button);
			panel.add(label0);
			panel.add(label1);
			panel.add(label2);
			panel.add(label3);
			winningXFrame.add(panel);
		}
	}
	public void grandWinAction(int count){
		if(count>=3){
			grandFrame.setVisible(true);
		}
	
	}
}
